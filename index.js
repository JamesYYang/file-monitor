// Generated by CoffeeScript 1.6.3
var events, fs, path, sys, walk, watchFiles;

sys = require("util");

fs = require("fs");

path = require("path");

events = require("events");

watchFiles = {};

walk = function(dir, options, callback) {
  if (!callback.pending) {
    callback.pending = 0;
  }
  callback.pending += 1;
  return fs.stat(dir, function(err, stat) {
    if (err) {
      return callback(err);
    }
    fs.readdir(dir, function(err, files) {
      if (err) {
        return callback(err);
      }
      callback.pending -= 1;
      files.forEach(function(f, index) {
        f = path.join(dir, f);
        callback.pending += 1;
        return fs.stat(f, function(err, stat) {
          if (err) {
            return callback(err);
          }
          callback.pending -= 1;
          if (stat.isFile()) {
            if (!options.filter || ((options.filter != null) && options.filter(f, stat))) {
              watchFiles[f] = f;
            }
          } else {
            if (stat.isDirectory()) {
              walk(f, options, callback);
            }
          }
          if (callback.pending === 0) {
            return callback(null);
          }
        });
      });
      if (callback.pending === 0) {
        return callback(null);
      }
    });
    if (callback.pending === 0) {
      return callback(null);
    }
  });
};

exports.watchDirectory = function(root, options, callback) {
  if (!callback) {
    callback = options;
    options = {};
  }
  walk(root, options, function(err) {
    var file, fileMonitor, _results;
    if (err) {
      throw err;
    }
    fileMonitor = function(f) {
      return fs.watchFile(f, options, function(c, p) {
        if (watchFiles[f] && c.nlink !== 0 && p.mtime.getTime() === c.mtime.getTime()) {
          return;
        }
        return fs.readFile(f, function(err, data) {
          var obj;
          if (err) {
            return;
          }
          if (options.tryParseJson != null) {
            try {
              obj = JSON.parse(data);
              return callback(null, f, c, p, obj);
            } catch (_error) {
              return callback(null, f, c, p, data);
            }
          }
        });
      });
    };
    _results = [];
    for (file in watchFiles) {
      _results.push(fileMonitor(file));
    }
    return _results;
  });
};
